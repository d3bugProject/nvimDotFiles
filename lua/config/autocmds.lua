--[[
  üß©‚ú® Smart nvim-cmp management during LuaSnip snippet editing ‚ú®üß©

  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
  üëá What does this block do?
    - When you're using a snippet (with LuaSnip), the completion popup (nvim-cmp)
      can sometimes get in the way by staying open on snippet placeholders.
    - This code disables nvim-cmp's completion automatically
      while you're editing a snippet, and re-enables it as soon as you leave.
    - üëâ Result: You can move through snippet placeholders WITHOUT any annoying completion popups!

  ‚öôÔ∏è How it works:
    1Ô∏è‚É£ When you enter a snippet field (placeholder):
        ‚ûî cmp is disabled for the current buffer.
    2Ô∏è‚É£ When you leave a snippet field:
        ‚ûî cmp is re-enabled for the current buffer.
    3Ô∏è‚É£ As a safety net, if you leave insert mode (InsertLeave):
        ‚ûî cmp is re-enabled.

  üî• Tip:
    - You can adapt this pattern for other snippet engines or completion plugins if needed!

  üö¶ Copy & paste this block for a super smooth "snippets first" experience!
  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
]]

local ok_cmp, cmp = pcall(require, "cmp")
local ok_luasnip, luasnip = pcall(require, "luasnip")

if ok_cmp and ok_luasnip then
  -- D√©sactive cmp d√®s qu'on entre dans un placeholder de snippet
  vim.api.nvim_create_autocmd("User", {
    pattern = "LuasnipInsertNodeEnter",
    callback = function()
      cmp.setup.buffer({ enabled = false })
    end,
  })

  -- R√©active cmp d√®s qu'on quitte un placeholder de snippet
  vim.api.nvim_create_autocmd("User", {
    pattern = "LuasnipInsertNodeLeave",
    callback = function()
      cmp.setup.buffer({ enabled = true })
    end,
  })

  -- S√ªret√© : si tu quittes le mode insert, r√©active cmp
  vim.api.nvim_create_autocmd("InsertLeave", {
    callback = function()
      cmp.setup.buffer({ enabled = true })
    end,
  })
end
